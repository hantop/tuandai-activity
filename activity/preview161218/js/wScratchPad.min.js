(function(a) {
	'use strict';

	function b(d, c) {
		this.$el = a(d);
		this.options = c;
		this.init = false;
		this.enabled = true;
		this._generate()
	}
	b.prototype = {
		_generate: function() {
			if (!a.support.canvas) {
				this.$el.append("Canvas is not supported in this browser.");
				return true
			}
			this.canvas = document.createElement("canvas");
			this.ctx = this.canvas.getContext("2d");
			if (this.$el.css("position") === "static") {
				this.$el.css("position", "relative")
			}
			this.$img = a('<img src=""/>').attr("crossOrigin", "").css({
				position: "absolute",
				width: "100%",
				height: "100%"
			});
			this.$scratchpad = a(this.canvas).css({
				position: "absolute",
				width: "100%",
				height: "100%"
			});
			this.$scratchpad.bindMobileEvents();
			this.$scratchpad.mousedown(a.proxy(function(c) {
				if (!this.enabled) {
					return true
				}
				this.canvasOffset = a(this.canvas).offset();
				this.scratch = true;
				this._scratchFunc(c, "Down")
			}, this)).mousemove(a.proxy(function(c) {
				if (this.scratch) {
					this._scratchFunc(c, "Move")
				}
			}, this)).mouseup(a.proxy(function(c) {
				if (this.scratch) {
					this.scratch = false;
					this._scratchFunc(c, "Up")
				}
			}, this));
			this._setOptions();
			this.$el.append(this.$scratchpad);
			this.init = true;
			this.reset()
		},
		reset: function() {
			var f = this,
				e = Math.ceil(this.$el.innerWidth()),
				d = Math.ceil(this.$el.innerHeight()),
				c = window.devicePixelRatio || 1;
			this.pixels = e * d;
			this.$scratchpad.attr("width", e).attr("height", d);
			this.canvas.setAttribute("width", e * c);
			this.canvas.setAttribute("height", d * c);
			this.ctx.scale(c, c);
			this.pixels = e * c * d * c;
			this.$img.hide();
			if (this.options.bg) {
				if (this.options.bg.charAt(0) === "#") {
					this.$el.css("backgroundColor", this.options.bg)
				} else {
					this.$el.css("backgroundColor", "");
					this.$img.attr("src", this.options.bg)
				}
			}
			if (this.options.fg) {
				if (this.options.fg.charAt(0) === "#") {
					this.ctx.fillStyle = this.options.fg;
					this.ctx.beginPath();
					this.ctx.rect(0, 0, e, d);
					this.ctx.fill();
					this.$img.show()
				} else {
					a(new Image()).attr("src", this.options.fg).load(function() {
						f.ctx.drawImage(this, 0, 0, e, d);
						f.$img.show()
					})
				}
			}
		},
		clear: function() {
			this.ctx.clearRect(0, 0, Math.ceil(this.$el.innerWidth()), Math.ceil(this.$el.innerHeight()))
		},
		enable: function(c) {
			this.enabled = c === true ? true : false
		},
		destroy: function() {
			this.$el.children().remove();
			a.removeData(this.$el, "wScratchPad")
		},
		_setOptions: function() {
			var c, d;
			for (c in this.options) {
				this.options[c] = this.$el.attr("data-" + c) || this.options[c];
				d = "set" + c.charAt(0).toUpperCase() + c.substring(1);
				if (this[d]) {
					this[d](this.options[c])
				}
			}
		},
		setBg: function() {
			if (this.init) {
				this.reset()
			}
		},
		setFg: function() {
			this.setBg()
		},
		setCursor: function(c) {
			this.$el.css("cursor", c)
		},
		_scratchFunc: function(d, c) {
			d.pageX = Math.floor(d.pageX - this.canvasOffset.left);
			d.pageY = Math.floor(d.pageY - this.canvasOffset.top);
			this["_scratch" + c](d);
			if (this.options.realtime || c === "Up") {
				if (this.options["scratch" + c]) {
					this.options["scratch" + c].apply(this, [d, this._scratchPercent()])
				}
			}
		},
		_scratchPercent: function() {
			var c = 0,
				f = this.ctx.getImageData(0, 0, this.canvas.width, this.canvas.height);
			for (var d = 0, e = f.data.length; d < e; d = d + 4) {
				if (f.data[d] === 0 && f.data[d + 1] === 0 && f.data[d + 2] === 0 && f.data[d + 3] === 0) {
					c++
				}
			}
			return (c / this.pixels) * 100
		},
		_scratchDown: function(c) {
			this.ctx.globalCompositeOperation = "destination-out";
			this.ctx.lineJoin = "round";
			this.ctx.lineCap = "round";
			this.ctx.strokeStyle = this.options.color;
			this.ctx.lineWidth = this.options.size;
			this.ctx.beginPath();
			this.ctx.arc(c.pageX, c.pageY, this.options.size / 2, 0, Math.PI * 2, true);
			this.ctx.closePath();
			this.ctx.fill();
			this.ctx.beginPath();
			this.ctx.moveTo(c.pageX, c.pageY)
		},
		_scratchMove: function(c) {
			this.ctx.lineTo(c.pageX, c.pageY);
			this.ctx.stroke()
		},
		_scratchUp: function() {
			this.ctx.closePath()
		}
	};
	a.support.canvas = (document.createElement("canvas")).getContext;
	a.fn.wScratchPad = function(k, i) {
		function d() {
			var l = a.data(this, "wScratchPad");
			if (!l) {
				l = new b(this, a.extend(true, {}, k));
				a.data(this, "wScratchPad", l)
			}
			return l
		}
		if (typeof k === "string") {
			var c, j = [],
				f = (i !== undefined ? "set" : "get") + k.charAt(0).toUpperCase() + k.substring(1),
				g = function() {
					if (c.options[k]) {
						c.options[k] = i
					}
					if (c[f]) {
						c[f].apply(c, [i])
					}
				},
				h = function() {
					if (c[f]) {
						return c[f].apply(c, [i])
					} else {
						if (c.options[k]) {
							return c.options[k]
						} else {
							return undefined
						}
					}
				},
				e = function() {
					c = a.data(this, "wScratchPad");
					if (c) {
						if (c[k]) {
							c[k].apply(c, [i])
						} else {
							if (i !== undefined) {
								g()
							} else {
								j.push(h())
							}
						}
					}
				};
			this.each(e);
			return j.length ? (j.length === 1 ? j[0] : j) : this
		}
		k = a.extend({}, a.fn.wScratchPad.defaults, k);
		return this.each(d)
	};
	a.fn.wScratchPad.defaults = {
		size: 15,
		bg: "#cacaca",
		fg: "#6699ff",
		realtime: true,
		scratchDown: null,
		scratchUp: null,
		scratchMove: null,
		cursor: "crosshair"
	};
	a.fn.bindMobileEvents = function() {
		a(this).on("touchstart touchmove touchend touchcancel", function(e) {
			var f = (e.changedTouches || e.originalEvent.targetTouches),
				g = f[0],
				c = "";
			switch (e.type) {
				case "touchstart":
					c = "mousedown";
					break;
				case "touchmove":
					c = "mousemove";
					e.preventDefault();
					break;
				case "touchend":
					c = "mouseup";
					break;
				default:
					return
			}
			if (!g) {
				return
			}
			var d = document.createEvent("MouseEvent");
			d.initMouseEvent(c, true, true, window, 1, g.screenX, g.screenY, g.clientX, g.clientY, false, false, false, false, 0, null);
			g.target.dispatchEvent(d)
		})
	}
})(jQuery);